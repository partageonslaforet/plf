pipeline {
    agent any
    environment {
        GITHUB_TOKEN=credentials('plf-github-token')
        IMAGE_NAME='plf-dev-app'
        IMAGE_VERSION='1.0'
        DEPLOYMENT_NAME='plf-dev-app'
        NAMESPACE_NAME='plf-dev'
        TAG_NAME='ghcr.io/partageonslaforet'
    }
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }

    stages{


        // stage("Cleanup") {
        //     steps{

        //         cleanWs notFailBuild: true
        //         // sh 'docker system prune -a --volumes --force'
        //         echo "cleaning ${env.JOB_NAME}..."

        //     }
        // }
        
        stage("Github checkout") {
            steps{

                checkout scmGit(branches: [[name: '*/jenkins-test']], extensions: [], userRemoteConfigs: [[url: "https://github.com/partageonslaforet/plf.git"]])
                echo "Checkout ${env.JOB_NAME}..."

            }
        }




        stage('Build docker image'){
            steps{

                sh 'docker build -t $IMAGE_NAME:$IMAGE_VERSION -f ./docker/dev/app/dockerfile.app .'
                echo "Checkout ${env.JOB_NAME}..."
            }
        }



        stage('Login to GitHub'){
            steps{
                sh 'echo $GITHUB_TOKEN_PSW | docker login ghcr.io -u $GITHUB_TOKEN_USR --password-stdin'
                echo " ${env.JOB_NAME} Logged in to GitHub..."
            }
        }

        stage('Tag images'){
            steps{
                sh 'docker tag  $IMAGE_NAME:$IMAGE_VERSION $TAG_NAME/$IMAGE_NAME:$IMAGE_VERSION'
                echo "Image tagged ${env.JOB_NAME}..."

            }
        }


        stage('Push image to GitHub'){
            steps{

                sh 'docker push $TAG_NAME/$IMAGE_NAME:$IMAGE_VERSION'
                echo "Checkout ${env.JOB_NAME}..."
            }
        }


        stage('remove docker image and pull it again') {
            steps {
                script {
                    try {
                        sh 'docker image rm docker.io/library/$IMAGE_NAME:$IMAGE_VERSION'
                    } catch (e) {
                        echo "Image rm failed : docker.io/library/$IMAGE_NAME:$IMAGE_VERSION - ${e} ... continuing"
                    }

                    try {
                        sh 'docker image rm $TAG_NAME/$IMAGE_NAME:$IMAGE_VERSION'
                    } catch (e) {
                        echo "Image rm failed : $TAG_NAME/$IMAGE_NAME:$IMAGE_VERSION - ${e} ... continuing"
                    }

                    sh 'docker pull $TAG_NAME/$IMAGE_NAME:$IMAGE_VERSION'
                    sh 'docker tag  $TAG_NAME/$IMAGE_NAME:$IMAGE_VERSION docker.io/library/$IMAGE_NAME:$IMAGE_VERSION'

                }

            }
        }

        stage('Deploy To Development') {
            steps {
                sh 'kubectl apply -f ./K8s/dev/plf-dev-app-deployment.yml --namespace $NAMESPACE_NAME '
                sh 'kubectl rollout restart deployment $DEPLOYMENT_NAME --namespace $NAMESPACE_NAME'
            }
        }



    }

    post {
        // Clean after build
        always {
            sh 'docker logout'
            // cleanWs(cleanWhenNotBuilt: false,
            //         deleteDirs: true,
            //         disableDeferredWipeout: true,
            //         notFailBuild: true,
            //         patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
            //                    [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }

}
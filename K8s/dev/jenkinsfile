pipeline {
    agent any
    environment {
        GITHUB_TOKEN=credentials('plf-github-token')
        IMAGE_NAME='partageonslaforet/plf-dev-app'
        IMAGE_VERSION='1.0'
        DEPLOYMENT_NAME='plf-dev-app'
        NAMESPACE_NAME='default'
    }
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }

    stages{


        // stage("Cleanup") {
        //     steps{

        //         cleanWs notFailBuild: true
        //         // sh 'docker system prune -a --volumes --force'
        //         echo "cleaning ${env.JOB_NAME}..."

        //     }
        // }
        
        stage("Github checkout") {
            steps{

                checkout scmGit(branches: [[name: '*/jenkins-test']], extensions: [], userRemoteConfigs: [[url: "https://github.com/partageonslaforet/plf.git"]])
                echo "Checkout ${env.JOB_NAME}..."

            }
        }




        stage('Build docker image'){
            steps{

                sh 'docker build -t $IMAGE_NAME:$IMAGE_VERSION -f ./docker/dev/app/dockerfile.app .'
                echo "Checkout ${env.JOB_NAME}..."
            }
        }



        stage('Login to GitHub'){
            steps{
                sh 'echo $GITHUB_TOKEN_PSW | docker login ghcr.io -u $GITHUB_TOKEN_USR --password-stdin'
                echo " ${env.JOB_NAME} Logged in to GitHub..."
            }
        }

        stage('Tag images'){
            steps{
                sh 'docker tag  $IMAGE_NAME:$IMAGE_VERSION ghcr.io/$IMAGE_NAME:$IMAGE_VERSION'
                echo "Image tagged ${env.JOB_NAME}..."
            }
        }


        stage('Push image to GitHub'){
            steps{
                sh 'docker push ghcr.io/$IMAGE_NAME:$IMAGE_VERSION'
                echo "Checkout ${env.JOB_NAME}..."
            }
        }


        stage('Deploy To Development') {
            steps {
                // kubeconfig(caCertificate: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1USXdOREUwTXpZME5sb1hEVE15TVRJd01URTBNelkwTmxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTVV4CnR2eFdmcmNGV2crVFpxSi92U3pWRFlPSVVMWE0zMlRxOW9TL1g5UzZVVjNkZ0xUTDI4V0IvblF0K0xGbjNwWEQKOE9RNTZVN25sZlhiSWI0Q1ZUdVVkVDg0c2xGcVdWN2lkUVlGNXVNaERDamF2MW16OG9IbVJQVXlBVW9HQWY5VApWWUFxY3h2VnVvbDVKa1EydXpyTHJrZ1VJU2k3dVdYdlVxRnl4bW8rUWt2cWRiUm5ldDBpbHNTbU5FdDlObTNTClVJSStrbTRZU3lod2xtTHlOYXJPc0lsNVU3ZXpuUG1Ua0E0MXN1ZG4wSjNRMXBYQUdSY2NqVXVzWjBIK3FyZm4KOGJWdFpuMmhsbms0VHRMSGhEUS81MFNXOCt1MEVLOHo2Sms5bHVET1BiSjdxam11U0Y1c3RJUDg1VWo2SndhMgpoUm1sclU1UUlzSTd5ZWlFMzZFQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZQcFhkVmc3LzJiUGhBZytZdys4WFIzWk90OUJNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBR2IwcEEwQythVFVDdytOY1FyZgp3NHNhQStUMnNMU0xTM3NGOWh1NEdKU0lHaXdPTDRja2pscE1sUTE5aDltWnVpdVBkOEhNa0RrWTBTRHQvRXdyCm94MVdrYTlxMkFEZ0hyVCtDUzBOWHVJMDBLQ0QzdDd5czBhdGl6b21lWnppcE9aYkZRdnI2eEU0bUhQY0hNQUEKQ1dMR2RvRjNhVEZFODJIUWxLWkM4anFHUklqeE5SWlFpZ1IvVXlxSktYZWs1Z1BQZGVzckJRY2NuQzVtVWxoOQo0cktwT1p0UTBjajFMakx2dkQxNWdCMkVSVzBtK2lDTUhCM1g1SGJXdkZWOEgzOEFzcjc5amwrMHFoU1lRTTVoCmsweVNxd3gvY2hFd0hWc0NURjNKSUZUejAwZVhFa0VPdE1yVitYWEhKNk9jdzFINXFvNFhHY0NoUDN2c3NZbFMKUWw0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==', 
                //     credentialsId: 'kubernetes', 
                //     serverUrl: 'https://192.168.59.104:8443') {
                // sh 'docker pull ghcr.io/$IMAGE_NAME:$IMAGE_VERSION'
                sh 'kubectl apply --namespace -f ./K8s/dev/plf-dev-app-deployment.yml $NAMESPACE_NAME '
                // sh 'kubectl apply -f app-service.yaml'
                sh 'kubectl rollout restart deployment $DEPLOYMENT_NAME --namespace $NAMESPACE_NAME'
                // }
            }
        }



    }

    post {
        // Clean after build
        always {
            sh 'docker logout'
            // cleanWs(cleanWhenNotBuilt: false,
            //         deleteDirs: true,
            //         disableDeferredWipeout: true,
            //         notFailBuild: true,
            //         patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
            //                    [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }

}
pipeline {
    agent any

    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }

    stages{


        stage("Cleanup") {
            steps{
                cleanWs()
                echo "cleaning ${env.JOB_NAME}..."
            }
        }


        stage("Github checkout") {
            steps{

                checkout scmGit(branches: [[name: '*/jenkins-test']], extensions: [], userRemoteConfigs: [[url: "https://github.com/partageonslaforet/plf.git"]])
                echo "Checkout ${env.JOB_NAME}..."

            }
        }




        stage('Build docker image'){
            steps{
                script{
                    sh 'docker build -t plf-dev-app:1.0 -f ./docker/dev/app/dockerfile.app .'
                }
                echo "Checkout ${env.JOB_NAME}..."
            }
        }



        // stage('Push image to Docker Hub'){
        //     steps{
        //         script{
        //             // withCredentials([string(credentialsId: '<your dockerhub credential id>', variable: 'dockerpwd')]) {
        //             //     sh 'docker login -u <your dockerhub user name> -p ${dockerpwd}'
        //             // }
        //             sh 'docker push plf-dev-app:1.0 .'
        //         }
        //         echo "Checkout ${env.JOB_NAME}..."
        //     }
        // }



        // stage('Deploy to k8s'){
        //     steps{
        //         script{
        //             kubeconfig(credentialsId: 'mykubeconfig', serverUrl: 'https://172.31.54.73:8443') {
        //                 sh 'kubectl apply -f deployment.yml'
        //                 sh 'kubectl rollout restart -f deployment.yml'
        //                 sh 'kubectl apply -f service.yml'
        //             }
        //         }
        //     }
        // }


        
    }



    post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
}